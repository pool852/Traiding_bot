from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from services import get_forecast, generate_signal, safe_generate_explanation, get_support_resistance
from utils import main_menu, markup, user_state, symbols
from bot_init import bot, dp
import logging
import os
from charting import get_ohlcv, generate_chart
from llm_explainer import generate_direction_and_probability, generate_full_forecast
import re

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º"), KeyboardButton("üí± –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"))
    return kb

# --- –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º ---
INDICATOR_HELP = {
    "RSI": "RSI (Relative Strength Index) ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–ª—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω –∞–∫—Ç–∏–≤: –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ 70 ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å, –Ω–∏–∂–µ 30 ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å. –ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ—á–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Ç—Ä–µ–Ω–¥.",
    "MACD": "MACD ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Ä–∞–∑–Ω–∏—Ü–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö. –ü–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–∏–ª—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞, –∞ —Ç–∞–∫–∂–µ –º–æ–º–µ–Ω—Ç—ã —Å–º–µ–Ω—ã —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏. –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞.",
    "EMA": "EMA (–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è) ‚Äî —Å–≥–ª–∞–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—É, –ø—Ä–∏–¥–∞–≤–∞—è –±–æ–ª—å—à–∏–π –≤–µ—Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º. EMA(7/50/100) –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –∏ –ø–æ–º–æ–≥–∞—é—Ç –≤–∏–¥–µ—Ç—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã. –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EMA —á–∞—Å—Ç–æ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –æ —Å–º–µ–Ω–µ —Ç—Ä–µ–Ω–¥–∞.",
    "Stoch RSI": "Stoch RSI ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫ –∏ RSI. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ –∏ —Å–∏–ª—å–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è RSI, –∏ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–æ–Ω—ã –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏. –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤.",
    "–û–±—ä—ë–º": "–û–±—ä—ë–º ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –í—ã—Å–æ–∫–∏–π –æ–±—ä—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∏–ª—É –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã, –∞ –Ω–∏–∑–∫–∏–π ‚Äî –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–ª–∞–±–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–∞. –í –±–æ—Ç–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å —Å—Ä–µ–¥–Ω–∏–º –æ–±—ä—ë–º–æ–º –∑–∞ 20 —Å–≤–µ—á–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞.",
}

def get_indicators_help_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    names = list(INDICATOR_HELP.keys())
    for i in range(0, len(names), 3):
        row = [KeyboardButton(name) for name in names[i:i+3]]
        kb.row(*row)
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

@dp.message_handler(lambda message: message.text == "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º")
async def show_indicators_help(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:", reply_markup=get_indicators_help_keyboard())

@dp.message_handler(lambda message: message.text in INDICATOR_HELP)
async def show_indicator_info(msg: types.Message):
    ind = msg.text
    text = INDICATOR_HELP.get(ind, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"))
    await msg.answer(f"<b>{ind}</b>\n{text}", parse_mode="HTML", reply_markup=kb)

@dp.message_handler(lambda message: message.text == "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
async def back_to_indicators_list(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:", reply_markup=get_indicators_help_keyboard())

@dp.message_handler(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def help_back_handler(msg: types.Message):
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    logging.info(f"[START] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
    await msg.answer("\U0001F44B –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

@dp.message_handler(commands=['help'])
async def help_command(msg: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""
    await msg.answer("\U0001F4B0 <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É.\n2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º.\n3. –ü–æ–ª—É—á–∏—Ç–µ —Å–∏–≥–Ω–∞–ª, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –≥—Ä–∞—Ñ–∏–∫.\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'.", parse_mode="HTML")

def get_symbols_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, len(symbols), 3):
        row = [KeyboardButton(sym) for sym in symbols[i:i+3]]
        kb.row(*row)
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

def get_timeframes_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("15 –º–∏–Ω—É—Ç"), KeyboardButton("1 —á–∞—Å"), KeyboardButton("4 —á–∞—Å–∞"))
    kb.row(KeyboardButton("–ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"), KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

@dp.message_handler(lambda message: message.text == "üí± –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
async def choose_symbol_menu(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É:", reply_markup=get_symbols_keyboard())

@dp.message_handler(lambda message: message.text in symbols)
async def choose_symbol(msg: types.Message):
    symbol = msg.text
    user_state[msg.from_user.id] = symbol
    logging.info(f"[SYMBOL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –≤—ã–±—Ä–∞–ª {symbol}")
    await msg.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {symbol}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=get_timeframes_keyboard())

@dp.message_handler(lambda message: message.text in ["15 –º–∏–Ω—É—Ç", "1 —á–∞—Å", "4 —á–∞—Å–∞", "–ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"])
async def choose_timeframe(msg: types.Message):
    symbol = user_state.get(msg.from_user.id)
    if not symbol:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É!", reply_markup=get_symbols_keyboard())
        return
    tf_map = {
        "15 –º–∏–Ω—É—Ç": "15m",
        "1 —á–∞—Å": "1h",
        "4 —á–∞—Å–∞": "4h",
        "–ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑": "full"
    }
    tf = tf_map[msg.text]
    try:
        import time
        user_id = msg.from_user.id
        loader_msg = await msg.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ", reply_markup=ReplyKeyboardRemove())
        if tf == "full":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            tf_data_15m = get_forecast(symbol, "15m")
            tf_data_1h = get_forecast(symbol, "1h")
            tf_data_4h = get_forecast(symbol, "4h")
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            prob_15m = await generate_direction_and_probability(tf_data_15m["indicators"], "15m", symbol)
            prob_1h = await generate_direction_and_probability(tf_data_1h["indicators"], "1h", symbol)
            prob_4h = await generate_direction_and_probability(tf_data_4h["indicators"], "4h", symbol)
            probs = {"15m": prob_15m, "1h": prob_1h, "4h": prob_4h}
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            df_15m = get_ohlcv(symbol, "15m", limit=300)
            support_15m, resistance_15m = get_support_resistance(df_15m)
            df_1h = get_ohlcv(symbol, "1h", limit=300)
            support_1h, resistance_1h = get_support_resistance(df_1h)
            df_4h = get_ohlcv(symbol, "4h", limit=300)
            support_4h, resistance_4h = get_support_resistance(df_4h)
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            chart_path_15m = generate_chart(symbol, interval_binance="15m", output_path=f"chart_15m_{user_id}_{int(time.time())}.png", levels=[support_15m, resistance_15m])
            chart_path_1h = generate_chart(symbol, interval_binance="1h", output_path=f"chart_1h_{user_id}_{int(time.time())}.png", levels=[support_1h, resistance_1h])
            chart_path_4h = generate_chart(symbol, interval_binance="4h", output_path=f"chart_4h_{user_id}_{int(time.time())}.png", levels=[support_4h, resistance_4h])
            # –ù–æ–≤—ã–π: –æ–¥–∏–Ω LLM-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            full_forecast = await generate_full_forecast(symbol, tf_data_15m["indicators"], tf_data_1h["indicators"], tf_data_4h["indicators"])
            formatted_forecast = format_full_forecast_text(full_forecast, probs=probs)
            await msg.answer(f"<b>{symbol} ‚Äî –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑</b>\n" + formatted_forecast, parse_mode="HTML")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            if chart_path_15m:
                if os.path.exists(chart_path_15m):
                    with open(chart_path_15m, "rb") as photo:
                        await msg.answer_photo(photo, caption="–ì—Ä–∞—Ñ–∏–∫ 15 –º–∏–Ω—É—Ç")
                    try:
                        os.remove(chart_path_15m)
                    except Exception as e:
                        logging.warning(f"[CLEANUP] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {chart_path_15m}: {e}")
                else:
                    await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ 15 –º–∏–Ω—É—Ç.")
            if chart_path_1h:
                if os.path.exists(chart_path_1h):
                    with open(chart_path_1h, "rb") as photo:
                        await msg.answer_photo(photo, caption="–ì—Ä–∞—Ñ–∏–∫ 1 —á–∞—Å")
                    try:
                        os.remove(chart_path_1h)
                    except Exception as e:
                        logging.warning(f"[CLEANUP] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {chart_path_1h}: {e}")
                else:
                    await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ 1 —á–∞—Å.")
            if chart_path_4h:
                if os.path.exists(chart_path_4h):
                    with open(chart_path_4h, "rb") as photo:
                        await msg.answer_photo(photo, caption="–ì—Ä–∞—Ñ–∏–∫ 4 —á–∞—Å–∞")
                    try:
                        os.remove(chart_path_4h)
                    except Exception as e:
                        logging.warning(f"[CLEANUP] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {chart_path_4h}: {e}")
                else:
                    await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ 4 —á–∞—Å–∞.")
        else:
            # –î–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–∂–Ω—è—è
            tf_data = get_forecast(symbol, tf)
            short_comment = await safe_generate_short_comment(tf_data["indicators"], tf, symbol)
            df = get_ohlcv(symbol, tf, limit=300)
            support, resistance = get_support_resistance(df)
            chart_path = generate_chart(symbol, interval_binance=tf, output_path=f"chart_{tf}_{user_id}_{int(time.time())}.png", levels=[support, resistance])
            block = await format_analysis_block(symbol, tf, tf_data["indicators"], short_comment, support, resistance)
            await msg.answer(block, parse_mode="HTML")
            if chart_path:
                if os.path.exists(chart_path):
                    with open(chart_path, "rb") as photo:
                        await msg.answer_photo(photo, caption=f"–ì—Ä–∞—Ñ–∏–∫ {msg.text}")
                    try:
                        os.remove(chart_path)
                    except Exception as e:
                        logging.warning(f"[CLEANUP] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {chart_path}: {e}")
                else:
                    await msg.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ {msg.text}.")
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=get_timeframes_keyboard())
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", reply_markup=get_timeframes_keyboard())

@dp.message_handler(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def universal_back(msg: types.Message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–±–∏—Ä–∞–ª —Ç–∞–π–º—Ñ—Ä–µ–π–º ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –º–æ–Ω–µ—Ç–∞–º, –µ—Å–ª–∏ –º–æ–Ω–µ—Ç—ã ‚Äî –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if msg.reply_to_message and msg.reply_to_message.text and "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º" in msg.reply_to_message.text:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É:", reply_markup=get_symbols_keyboard())
    elif msg.reply_to_message and msg.reply_to_message.text and "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É" in msg.reply_to_message.text:
        await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@dp.callback_query_handler(lambda c: c.data.startswith("forecast_"))
async def handle_forecast_query(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    symbol = user_state.get(user_id)
    if not symbol:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É!", show_alert=True)
        return
    try:
        await callback_query.answer()
        tf = callback_query.data  # forecast_15m, forecast_1h, forecast_full
        logging.info(f"[FORECAST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ {symbol} ({tf})")
        import time
        if tf == "forecast_15m":
            tf15 = get_forecast(symbol, "15m")
            short_comment_15m = await safe_generate_short_comment(tf15["indicators"], "15m", symbol)
            df_short = get_ohlcv(symbol, "15m", limit=300)
            support, resistance = get_support_resistance(df_short)
            levels = [float(support), float(resistance)]
            chart_path_15m = None
            try:
                chart_path_15m = generate_chart(symbol, interval_binance="15m", output_path=f"chart_15m_{user_id}_{int(time.time())}.png", levels=levels)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            block = await format_analysis_block(symbol, '15m', tf15["indicators"], short_comment_15m, support, resistance)
            await bot.send_message(user_id, block, parse_mode="HTML")
            if chart_path_15m and os.path.exists(chart_path_15m):
                await bot.send_photo(user_id, InputFile(chart_path_15m), caption="üìâ –ì—Ä–∞—Ñ–∏–∫ 15m", parse_mode="HTML")
                try:
                    os.remove(chart_path_15m)
                except Exception as e:
                    logging.warning(f"[CLEANUP] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {chart_path_15m}: {e}")
            elif not chart_path_15m:
                await bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
        elif tf == "forecast_1h":
            tf1h = get_forecast(symbol, "1h")
            short_comment_1h = await safe_generate_short_comment(tf1h["indicators"], "1h", symbol)
            df_short = get_ohlcv(symbol, "1h", limit=300)
            support, resistance = get_support_resistance(df_short)
            levels = [float(support), float(resistance)]
            chart_path_1h = None
            try:
                chart_path_1h = generate_chart(symbol, interval_binance="1h", output_path=f"chart_1h_{user_id}_{int(time.time())}.png", levels=levels)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            block = await format_analysis_block(symbol, '1h', tf1h["indicators"], short_comment_1h, support, resistance)
            await bot.send_message(user_id, block, parse_mode="HTML")
            if chart_path_1h and os.path.exists(chart_path_1h):
                await bot.send_photo(user_id, InputFile(chart_path_1h), caption="‚è∞ –ì—Ä–∞—Ñ–∏–∫ 1h", parse_mode="HTML")
                try:
                    os.remove(chart_path_1h)
                except Exception as e:
                    logging.warning(f"[CLEANUP] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {chart_path_1h}: {e}")
            elif not chart_path_1h:
                await bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
        elif tf == "forecast_4h":
            tf4h = get_forecast(symbol, "4h")
            short_comment_4h = await safe_generate_short_comment(tf4h["indicators"], "4h", symbol)
            df_short = get_ohlcv(symbol, "4h", limit=300)
            support, resistance = get_support_resistance(df_short)
            levels = [float(support), float(resistance)]
            chart_path_4h = None
            import time
            try:
                chart_path_4h = generate_chart(symbol, interval_binance="4h", output_path=f"chart_4h_{user_id}_{int(time.time())}.png", levels=levels)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            block = await format_analysis_block(symbol, '4h', tf4h["indicators"], short_comment_4h, support, resistance)
            await bot.send_message(user_id, block, parse_mode="HTML")
            if chart_path_4h and os.path.exists(chart_path_4h):
                await bot.send_photo(user_id, InputFile(chart_path_4h), caption="üïì –ì—Ä–∞—Ñ–∏–∫ 4h", parse_mode="HTML")
                try:
                    os.remove(chart_path_4h)
                except Exception as e:
                    logging.warning(f"[CLEANUP] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {chart_path_4h}: {e}")
            elif not chart_path_4h:
                await bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
        else:  # forecast_full
            tf15 = get_forecast(symbol, "15m")
            tf1h = get_forecast(symbol, "1h")
            tf4h = get_forecast(symbol, "4h")
            short_comment_15m = await safe_generate_short_comment(tf15["indicators"], "15m", symbol)
            short_comment_1h = await safe_generate_short_comment(tf1h["indicators"], "1h", symbol)
            short_comment_4h = await safe_generate_short_comment(tf4h["indicators"], "4h", symbol)
            df_15m = get_ohlcv(symbol, "15m", limit=300)
            support_15m, resistance_15m = get_support_resistance(df_15m)
            df_1h = get_ohlcv(symbol, "1h", limit=300)
            support_1h, resistance_1h = get_support_resistance(df_1h)
            df_4h = get_ohlcv(symbol, "4h", limit=300)
            support_4h, resistance_4h = get_support_resistance(df_4h)
            chart_path_15m = None
            chart_path_1h = None
            chart_path_4h = None
            try:
                chart_path_15m = generate_chart(symbol, interval_binance="15m", output_path=f"chart_15m_{user_id}_{int(time.time())}.png", levels=[float(support_15m), float(resistance_15m)])
                chart_path_1h = generate_chart(symbol, interval_binance="1h", output_path=f"chart_1h_{user_id}_{int(time.time())}.png", levels=[float(support_1h), float(resistance_1h)])
                chart_path_4h = generate_chart(symbol, interval_binance="4h", output_path=f"chart_4h_{user_id}_{int(time.time())}.png", levels=[float(support_4h), float(resistance_4h)])
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            blocks = [
                (await format_analysis_block(symbol, '15m', tf15["indicators"], short_comment_15m, support_15m, resistance_15m), chart_path_15m, "üìâ –ì—Ä–∞—Ñ–∏–∫ 15m"),
                (await format_analysis_block(symbol, '1h', tf1h["indicators"], short_comment_1h, support_1h, resistance_1h), chart_path_1h, "‚è∞ –ì—Ä–∞—Ñ–∏–∫ 1h"),
                (await format_analysis_block(symbol, '4h', tf4h["indicators"], short_comment_4h, support_4h, resistance_4h), chart_path_4h, "üïì –ì—Ä–∞—Ñ–∏–∫ 4h")
            ]
            for block, chart_path, chart_caption in blocks:
                await bot.send_message(user_id, block, parse_mode="HTML")
                if chart_path and os.path.exists(chart_path):
                    await bot.send_photo(user_id, InputFile(chart_path), caption=chart_caption, parse_mode="HTML")
                    try:
                        os.remove(chart_path)
                    except Exception as e:
                        logging.warning(f"[CLEANUP] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {chart_path}: {e}")
            await bot.send_message(user_id, "üí° <b>–û–±—â–∏–π –≤—ã–≤–æ–¥:</b>\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ –≤—Ö–æ–¥ —Å–∏–≥–Ω–∞–ª–æ–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—ã—Å–æ–∫–æ–µ –ø–ª–µ—á–æ –Ω–∞ —Å–ª–∞–±–æ–º —Ç—Ä–µ–Ω–¥–µ.", parse_mode="HTML")
        logging.info(f"[FORECAST_SUCCESS] –ê–Ω–∞–ª–∏–∑ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        if 'insufficient_quota' in str(e):
            await bot.send_message(user_id, "üö´ –û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OpenAI. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—é—á.")
        else:
            logging.exception(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await bot.send_message(user_id, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

@dp.callback_query_handler(lambda c: c.data == "refresh")
async def handle_refresh(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å'."""
    user_id = callback_query.from_user.id
    symbol = user_state.get(user_id)
    if not symbol:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É!", show_alert=True)
        return
    await callback_query.answer("–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback_query –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    new_callback = types.CallbackQuery(
        id=callback_query.id,
        from_user=callback_query.from_user,
        chat_instance=callback_query.chat_instance,
        message=callback_query.message,
        data="forecast_15m"
    )
    await handle_forecast_query(new_callback)

def get_bold_header(symbol: str, tf: str) -> str:
    tf_map = {"15m": "15 –º–∏–Ω—É—Ç", "1h": "1 —á–∞—Å", "4h": "4 —á–∞—Å–∞"}
    return f"<b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {tf_map.get(tf, tf)}:</b>"

def ensure_short_comment(explanation: str) -> str:
    if "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥:" not in explanation:
        return explanation.strip() + "\n–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: ‚Äî"
    return explanation.strip()

def build_indicators_block(symbol: str, indicators: dict) -> str:
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É EMA(50/100/200)
    def format_ema(val):
        return val if val != "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö" else "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
    ema50 = format_ema(indicators.get('EMA50', '-'))
    ema100 = format_ema(indicators.get('EMA100', '-'))
    ema200 = format_ema(indicators.get('EMA200', '-'))
    # –ù–æ–≤—ã–π –±–ª–æ–∫: –æ–±—ä—ë–º –≤ USDT
    volume = indicators.get('volume', '-')
    close = indicators.get('close')
    try:
        if volume not in (None, '-', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö') and close not in (None, '-', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'):
            volume_usdt = float(volume) * float(close)
            volume_str = f"Trade volume (USDT): {volume_usdt:,.2f}"
        else:
            volume_str = f"Trade volume: {volume}"
    except Exception:
        volume_str = f"Trade volume: {volume}"
    return (
        f"RSI: {indicators.get('RSI', '-')}\n"
        f"MACD: {indicators.get('MACD', '-')}\n"
        f"{volume_str}\n"
        f"Stoch RSI: {indicators.get('StochRSI', '-')}\n"
        f"EMA(50/100/200): {ema50} / {ema100} / {ema200}\n"
        f"–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥: {indicators.get('trend', '-')}"
    )

async def safe_generate_short_comment(indicators: dict, timeframe: str, symbol: str, max_retries: int = 3, delay: int = 2) -> str:
    from llm_explainer import generate_short_comment
    for attempt in range(max_retries):
        try:
            return await generate_short_comment(indicators, timeframe, symbol)
        except Exception as e:
            import asyncio
            if attempt < max_retries - 1:
                await asyncio.sleep(delay)
            else:
                return "‚Äî"
    return "‚Äî"

async def generate_general_summary(symbol: str, indicators_15m: dict, indicators_1h: dict, indicators_4h: dict) -> str:
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —á–µ—Ä–µ–∑ LLM
    pred_15m = await generate_direction_and_probability(indicators_15m, '15m', symbol)
    pred_1h = await generate_direction_and_probability(indicators_1h, '1h', symbol)
    pred_4h = await generate_direction_and_probability(indicators_4h, '4h', symbol)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    def parse_pred(pred):
        if '–®–û–†–¢' in pred.upper():
            return '–®–æ—Ä—Ç', int(''.join(filter(str.isdigit, pred))) if any(c.isdigit() for c in pred) else 0
        else:
            return '–õ–æ–Ω–≥', int(''.join(filter(str.isdigit, pred))) if any(c.isdigit() for c in pred) else 0
    dir_15m, prob_15m = parse_pred(pred_15m)
    dir_1h, prob_1h = parse_pred(pred_1h)
    dir_4h, prob_4h = parse_pred(pred_4h)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏
    def emoji_line(tf, direction, prob):
        if direction == '–õ–æ–Ω–≥':
            return f"{tf}: üü¢ –õ–û–ù–ì ({prob}%)"
        else:
            return f"{tf}: üî¥ –®–û–†–¢ ({prob}%)"
    lines = [
        emoji_line('15–º', dir_15m, prob_15m),
        emoji_line('1—á', dir_1h, prob_1h),
        emoji_line('4—á', dir_4h, prob_4h)
    ]
    # –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    long_count = [dir_15m, dir_1h, dir_4h].count('–õ–æ–Ω–≥')
    short_count = [dir_15m, dir_1h, dir_4h].count('–®–æ—Ä—Ç')
    if long_count > short_count:
        rec = "üü¢ –ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ –õ–û–ù–ì. –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏, –Ω–æ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∏—Å–∫–∏."
    elif short_count > long_count:
        rec = "üî¥ –ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ –®–û–†–¢. –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏, –Ω–æ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∏—Å–∫–∏."
    else:
        # –ï—Å–ª–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ ‚Äî –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        if max(prob_15m, prob_1h, prob_4h) == prob_15m:
            rec = emoji_line('15–º', dir_15m, prob_15m) + ". –°–∏–≥–Ω–∞–ª—ã —Ä–∞–≤–Ω—ã, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —ç—Ç–æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º."
        elif max(prob_15m, prob_1h, prob_4h) == prob_1h:
            rec = emoji_line('1—á', dir_1h, prob_1h) + ". –°–∏–≥–Ω–∞–ª—ã —Ä–∞–≤–Ω—ã, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —ç—Ç–æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º."
        else:
            rec = emoji_line('4—á', dir_4h, prob_4h) + ". –°–∏–≥–Ω–∞–ª—ã —Ä–∞–≤–Ω—ã, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —ç—Ç–æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º."
    return '\n'.join(lines) + '\n' + rec

def generate_trade_recommendation(indicators: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è ATR, SuperTrend, PSAR).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è).
    """
    prob = indicators.get("probability", 0)
    prob_dir = indicators.get("prob_direction", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ")
    leverage = indicators.get("leverage", 5)

    if prob_dir == "–õ–æ–Ω–≥":
        direction_text = "–í–≤–µ—Ä—Ö (–ª–æ–Ω–≥)"
    elif prob_dir == "–®–æ—Ä—Ç":
        direction_text = "–í–Ω–∏–∑ (—à–æ—Ä—Ç)"
    else:
        direction_text = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"

    rec = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è: {direction_text} —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {int(prob)}%\n"
    rec += f"–°—Ç–æ–ø-–ª–æ—Å—Å: 3%\n"
    rec += f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 10%\n"
    rec += f"–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: –æ—Ç 5 –¥–æ 10"
    return rec

# format_analysis_block ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥, –û–î–ò–ù –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–¢–æ—Ä–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:", —Ç–µ–ª–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –û–î–ù–û –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —Å—Å—ã–ª–∫–∞

async def format_analysis_block(symbol: str, tf: str, indicators: dict, short_comment: str, support: float, resistance: float) -> str:
    tf_map = {"15m": "15 –º–∏–Ω—É—Ç", "1h": "1 —á–∞—Å", "4h": "4 —á–∞—Å–∞"}
    # --- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ---
    def build_indicators_block(symbol: str, indicators: dict) -> str:
        def format_ema(val):
            return val if val != "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö" else "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
        ema50 = format_ema(indicators.get('EMA50', '-'))
        ema100 = format_ema(indicators.get('EMA100', '-'))
        ema200 = format_ema(indicators.get('EMA200', '-'))
        return (
            f"RSI: {indicators.get('RSI', '-')}\n"
            f"MACD: {indicators.get('MACD', '-')}\n"
            f"Trade volume: {indicators.get('volume', '-')}\n"
            f"Stoch RSI: {indicators.get('StochRSI', '-')}\n"
            f"EMA(50/100/200): {ema50} / {ema100} / {ema200}\n"
            f"–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥: {indicators.get('trend', '-')}"
        )
    indicators_block = build_indicators_block(symbol, indicators)
    short_comment = short_comment.strip()
    # --- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ---
    prob_block = await generate_direction_and_probability(indicators, tf, symbol)
    import re
    prob_block_upper = prob_block.upper()
    if "–õ–û–ù–ì" in prob_block_upper:
        direction = "–õ–û–ù–ì"
        emoji = "üü¢"
    elif "–®–û–†–¢" in prob_block_upper:
        direction = "–®–û–†–¢"
        emoji = "üî¥"
    else:
        direction = "-"
        emoji = "‚ö™"
    match = re.search(r"(\d{2,3})", prob_block)
    percent = match.group(1) if match else "-"
    probability_line = f"‚òëÔ∏è –°–∏–≥–Ω–∞–ª: {emoji} {direction} ({percent}%)"
    stop_loss_block = "‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: 3%"
    take_profit_block = "üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 10%"
    leverage_block = "üí∏ –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: –æ—Ç 5 –¥–æ 10"
    # --- –†–∏—Å–∫–∏ ---
    risk_block = "–¢–æ—Ä–≥–æ–≤–ª—è —Å –ø–ª–µ—á–æ–º –∏ –±–µ–∑ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ—Ç–µ—Ä—è–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é."
    result = (
        f"<b>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {tf_map.get(tf, tf)}:</b>\n"
        f"{indicators_block}\n\n"
        f"<b>üü¶ –£—Ä–æ–≤–Ω–∏:</b>\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {support}\n–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {resistance}\n\n"
        f"<b>üìù –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥:</b>\n{short_comment}\n\n"
        f"<b>üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è:</b>\n"
        f"{probability_line}\n"
        f"{stop_loss_block}\n"
        f"{take_profit_block}\n"
        f"{leverage_block}\n\n"
        f"<b>‚ö†Ô∏è –†–∏—Å–∫–∏:</b>\n{risk_block}"
    )
    return result

def format_full_forecast_text(raw: str, probs: dict = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç LLM –¥–ª—è Telegram (HTML):
    - –í—ã–¥–µ–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏ –æ–±—â–∏–π –≤—ã–≤–æ–¥
    - –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –±–ª–æ–∫–æ–≤
    - –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ BUY/SELL/HOLD
    - –í—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
    - –í—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (–±–µ–∑ —ç–º–æ–¥–∑–∏)
    - –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ probs
    """
    import re
    def emoji(line):
        if re.search(r'BUY|–ü–û–ö–£–ü', line, re.I):
            return 'üü¢'
        if re.search(r'SELL|–ü–†–û–î–ê', line, re.I):
            return 'üî¥'
        if re.search(r'HOLD|–ù–ï–ô–¢–†', line, re.I):
            return '‚ö™'
        return ''

    header_map = {
        '15 –º–∏–Ω—É—Ç:': 'üïí <b>15 –º–∏–Ω—É—Ç:</b>',
        '1 —á–∞—Å:': '‚è∞ <b>1 —á–∞—Å:</b>',
        '4 —á–∞—Å–∞:': 'üïì <b>4 —á–∞—Å–∞:</b>',
        '–û–±—â–∏–π –≤—ã–≤–æ–¥:': 'üí° <b>–û–±—â–∏–π –≤—ã–≤–æ–¥:</b>'
    }
    replacements = [
        (r'^(15 –º–∏–Ω—É—Ç:)', header_map['15 –º–∏–Ω—É—Ç:']),
        (r'^(1 —á–∞—Å:)', header_map['1 —á–∞—Å:']),
        (r'^(4 —á–∞—Å–∞:)', header_map['4 —á–∞—Å–∞:']),
        (r'^(–û–±—â–∏–π –≤—ã–≤–æ–¥:)', header_map['–û–±—â–∏–π –≤—ã–≤–æ–¥:']),
        (r'\* –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥:', r'‚Ä¢ <b>–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥:</b>'),
        (r'\* –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', r'‚Ä¢ <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>'),
        (r'\* –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:', r'‚Ä¢ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>'),
    ]
    lines = raw.split('\n')
    out = []
    indicators_block = []
    in_indicators = False
    current_tf = None
    for i, line in enumerate(lines):
        orig = line
        for pat, repl in replacements:
            line = re.sub(pat, repl, line)
        if i > 0 and (line.startswith('üïí') or line.startswith('‚è∞') or line.startswith('üïì')):
            out.append('<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>')
        if line.startswith('üí°'):
            out.append('<b>‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</b>')
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        if line.startswith('üïí'):
            current_tf = '15m'
        elif line.startswith('‚è∞'):
            current_tf = '1h'
        elif line.startswith('üïì'):
            current_tf = '4h'
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if '<b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>' in line and probs and current_tf in probs:
            prob_line = probs[current_tf]
            em = emoji(prob_line)
            line = f"{em} ‚Ä¢ <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {prob_line}"
        elif '<b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>' in line:
            em = emoji(line)
            if em and em not in line:
                line = f"{em} {line}"
        if '<b>–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥:</b>' in line:
            em = emoji(line)
            if em and em not in line:
                line = f"{em} {line}"
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: –∏—â–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'RSI: –∑–Ω–∞—á–µ–Ω–∏–µ'
        if '<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>' in line:
            in_indicators = True
            indicators_block = [f'<b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>']
            # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–∞—Ä—ã "–Ω–∞–∑–≤–∞–Ω–∏–µ: –∑–Ω–∞—á–µ–Ω–∏–µ"
            # –ü—Ä–∏–º–µ—Ä: 'RSI —É–º–µ—Ä–µ–Ω–Ω—ã–π, MACD –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≤—ã—à–µ–Ω, ...'
            ind_match = re.findall(r'(RSI [^,]+|MACD [^,]+|Stoch RSI [^,]+|EMA\(50\) [^,]+|MA Summary [^,]+|—Ç–µ–Ω–¥–µ–Ω—Ü–∏—è [^.,]+)', line)
            for ind in ind_match:
                # –¢–æ–ª—å–∫–æ –∂–∏—Ä–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π, –±–µ–∑ —ç–º–æ–¥–∑–∏
                ind = ind.replace('RSI', '<b>RSI</b>:').replace('MACD', '<b>MACD</b>:').replace('Stoch RSI', '<b>Stoch RSI</b>:')
                ind = ind.replace('EMA(50)', '<b>EMA(50)</b>:').replace('MA Summary', '<b>MA Summary</b>:').replace('—Ç–µ–Ω–¥–µ–Ω—Ü–∏—è', '<b>–¢–µ–Ω–¥–µ–Ω—Ü–∏—è</b>:')
                indicators_block.append(ind.strip())
            continue
        elif in_indicators and (line.strip() == '' or line.startswith('‚Ä¢')):
            if indicators_block:
                out.extend(indicators_block)
                indicators_block = []
            in_indicators = False
        out.append(line)
    if indicators_block:
        out.extend(indicators_block)
    formatted = '\n'.join([l for l in out if l.strip() != ''])
    return formatted

# --- –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ ---
# –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è tf_data_15m, tf_data_1h, tf_data_4h:
# –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —á–µ—Ä–µ–∑ generate_direction_and_probability
# probs = { '15m': ..., '1h': ..., '4h': ... }
# formatted_forecast = format_full_forecast_text(full_forecast, probs=probs)

@dp.message_handler()
async def unknown_message(msg: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /help."""
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.") 